"""
Django settings for DjangoBoilerplate project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Environment
DJANGO_ENV = config("DJANGO_ENV", default="development")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config(
    "SECRET_KEY",
    default="django-insecure-2%l-xabc_5q%*ch4c+_s4z12)fopd!cl2(h$6t(hj24glyd)nk",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=True, cast=bool)

ALLOWED_HOSTS = cloud_config.get_allowed_hosts()


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "django.contrib.sites",  # Required for allauth
    "rest_framework",
    "rest_framework.authtoken",
    # Django allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # Social providers
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.microsoft",
    "core.apps.CoreConfig",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "core.middleware.TokenBasedCSRFExemptMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # Required for allauth
    "core.middleware.CurrentUserMiddleware",
    "core.logging.StructuredLoggingMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "DjangoBoilerplate.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.template.context_processors.i18n",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "DjangoBoilerplate.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use cloud configuration abstraction for database settings
from core.cloud_config import cloud_config

DATABASES = {
    "default": cloud_config.database_config
}

# For SQLite, ensure the path is relative to BASE_DIR
if DATABASES["default"]["ENGINE"] == "django.db.backends.sqlite3":
    if not os.path.isabs(DATABASES["default"]["NAME"]):
        DATABASES["default"]["NAME"] = BASE_DIR / DATABASES["default"]["NAME"]


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en"

LANGUAGES = [
    ("en", "English"),
    ("fr", "Fran√ßais"),
]

LOCALE_PATHS = [
    BASE_DIR / "locale",
]

TIME_ZONE = "UTC"

USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model
AUTH_USER_MODEL = "core.User"

# Prefect Configuration
PREFECT_API_URL = config("PREFECT_API_URL", default="http://prefect-server:4200/api")
PREFECT_SERVER_HOST = config("PREFECT_SERVER_HOST", default="prefect-server")
PREFECT_SERVER_PORT = config("PREFECT_SERVER_PORT", default="4200")

# Static files configuration for production
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Logging configuration
# Configure structlog for structured JSON logging
from core.logging import configure_structlog

configure_structlog()

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {
            "format": "{message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "json",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO" if DJANGO_ENV == "production" else "DEBUG",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "core": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

# Django REST Framework Configuration
REST_FRAMEWORK = {
    # Authentication
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    # Permissions
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    # Renderers - JSONRenderer only in production, add BrowsableAPI for dev
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ]
    + (["rest_framework.renderers.BrowsableAPIRenderer"] if DEBUG else []),
    # Parsers
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ],
    # Pagination
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,
    # Versioning
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "DEFAULT_VERSION": "v1",
    "ALLOWED_VERSIONS": ["v1"],
    "VERSION_PARAM": "version",
    # Throttling - enabled with reasonable defaults
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "100/hour",  # Anonymous users: 100 requests per hour
        "user": "1000/hour",  # Authenticated users: 1000 requests per hour
    },
    # Exception handling
    "EXCEPTION_HANDLER": "api.v1.exceptions.custom_exception_handler",
}

# CORS Configuration for Frontend Integration
CORS_ALLOWED_ORIGINS = cloud_config.get_cors_origins()

# Additional CORS settings for development
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only allow all origins in debug mode

# CSRF Configuration for Token-Based Authentication
# Since we use token authentication for API endpoints, we can exempt API URLs from CSRF
CSRF_TRUSTED_ORIGINS = cloud_config.get_cors_origins()

# Security Headers Configuration
SECURE_CONTENT_TYPE_NOSNIFF = True  # X-Content-Type-Options: nosniff
X_FRAME_OPTIONS = "DENY"  # X-Frame-Options: DENY
SECURE_BROWSER_XSS_FILTER = True  # X-XSS-Protection: 1; mode=block

# Content Security Policy (basic configuration)
SECURE_CSP_DEFAULT_SRC = "'self'"
SECURE_CSP_SCRIPT_SRC = "'self' 'unsafe-inline'"
SECURE_CSP_STYLE_SRC = "'self' 'unsafe-inline'"
SECURE_CSP_IMG_SRC = "'self' data: https:"
SECURE_CSP_CONNECT_SRC = "'self'"

# Additional security headers for production
if not DEBUG and DJANGO_ENV == "production":
    SECURE_HSTS_SECONDS = 31536000  # HSTS header for 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = True  # Redirect HTTP to HTTPS
# Django Sites Framework (required for allauth)
SITE_ID = 1

# Django Allauth Configuration
AUTHENTICATION_BACKENDS = [
    # Default Django authentication backend
    "django.contrib.auth.backends.ModelBackend",
    # Allauth authentication backends
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Allauth general settings
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USER_MODEL_EMAIL_FIELD = "email"
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_RATE_LIMITS = {
    "login_failed": "5/5m",  # 5 attempts per 5 minutes
}
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https" if not DEBUG else "http"

# Social account settings
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"  # Social accounts are pre-verified
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_ADAPTER = "core.adapters.CustomSocialAccountAdapter"
ACCOUNT_ADAPTER = "core.adapters.CustomAccountAdapter"

# Social provider configurations
SOCIALACCOUNT_PROVIDERS = cloud_config.get_oauth_providers()

# Cloud Storage Configuration
# Use cloud-agnostic configuration
storage_config = cloud_config.storage_config

# Cloud provider settings
CLOUD_STORAGE_PROVIDER = storage_config['provider']
CLOUD_STORAGE_BUCKET_NAME = storage_config.get('bucket_name', storage_config.get('container_name'))
CLOUD_STORAGE_USE_ORG_SCOPING = config('CLOUD_STORAGE_USE_ORG_SCOPING', default=True, cast=bool)

# GCS-specific settings (backward compatibility)
if storage_config['provider'] == 'gcs':
    USE_GCS_EMULATOR = storage_config.get('use_emulator', False)
    GCS_BUCKET_NAME = storage_config['bucket_name']
    GCS_EMULATOR_HOST = storage_config.get('emulator_host', 'http://fake-gcs-server:9090')
    
    if USE_GCS_EMULATOR:
        GCS_CLIENT_OPTIONS = {
            "api_endpoint": GCS_EMULATOR_HOST,
        }
        import os
        os.environ["STORAGE_EMULATOR_HOST"] = GCS_EMULATOR_HOST.replace("http://", "")
    else:
        GCS_CLIENT_OPTIONS = {}

# AWS S3-specific settings
elif storage_config['provider'] == 's3':
    AWS_S3_REGION = storage_config.get('region')
    AWS_ACCESS_KEY_ID = storage_config.get('access_key_id')
    AWS_SECRET_ACCESS_KEY = storage_config.get('secret_access_key')
    AWS_S3_ENDPOINT_URL = storage_config.get('endpoint_url')

# Azure-specific settings
elif storage_config['provider'] == 'azure':
    AZURE_ACCOUNT_NAME = storage_config.get('account_name')
    AZURE_ACCOUNT_KEY = storage_config.get('account_key')
    AZURE_CONNECTION_STRING = storage_config.get('connection_string')
    AZURE_SAS_TOKEN = storage_config.get('sas_token')

# Storage settings for uploaded files
DEFAULT_FILE_STORAGE = "core.storage.get_default_storage"
GCS_DEFAULT_ACL = None  # Use bucket default ACL
