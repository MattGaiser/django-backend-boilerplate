"""
Django settings for DjangoBoilerplate project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Environment
DJANGO_ENV = config("DJANGO_ENV", default="development")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config(
    "SECRET_KEY",
    default="django-insecure-2%l-xabc_5q%*ch4c+_s4z12)fopd!cl2(h$6t(hj24glyd)nk",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=True, cast=bool)

ALLOWED_HOSTS = config(
    "ALLOWED_HOSTS", default="localhost,127.0.0.1,0.0.0.0,testserver", cast=lambda v: v.split(",")
)


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "django.contrib.sites",  # Required for allauth
    "rest_framework",
    "rest_framework.authtoken",
    # Django allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # Social providers
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.microsoft",
    # Enterprise features
    "drf_spectacular",  # API documentation
    "django_prometheus",  # Metrics and monitoring
    # Core application
    "core.apps.CoreConfig",
]

# Add development-only apps
if DEBUG:
    INSTALLED_APPS += [
        "django_extensions",
        "debug_toolbar",
        "silk",  # Performance profiling
    ]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django_prometheus.middleware.PrometheusBeforeMiddleware",  # Prometheus metrics
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "core.middleware.TokenBasedCSRFExemptMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # Required for allauth
    "core.middleware.CurrentUserMiddleware",
    "core.logging.StructuredLoggingMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_prometheus.middleware.PrometheusAfterMiddleware",  # Prometheus metrics
]

# Add development-only middleware
if DEBUG:
    MIDDLEWARE.insert(-1, "debug_toolbar.middleware.DebugToolbarMiddleware")
    MIDDLEWARE.insert(-1, "silk.middleware.SilkMiddleware")

ROOT_URLCONF = "DjangoBoilerplate.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.template.context_processors.i18n",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "DjangoBoilerplate.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Default to PostgreSQL for containerized environments, fallback to SQLite
if config("USE_POSTGRES", default=False, cast=bool):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": config("POSTGRES_DB", default="django_db"),
            "USER": config("POSTGRES_USER", default="django_user"),
            "PASSWORD": config("POSTGRES_PASSWORD", default="django_password"),
            "HOST": config("POSTGRES_HOST", default="db"),
            "PORT": config("POSTGRES_PORT", default="5432"),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# Cache Configuration
# https://docs.djangoproject.com/en/5.2/topics/cache/

# Redis cache configuration (used in production/staging)
if config("USE_REDIS_CACHE", default=False, cast=bool):
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": config("REDIS_URL", default="redis://redis:6379/1"),
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "CONNECTION_POOL_KWARGS": {
                    "max_connections": 20,
                    "health_check_interval": 30,
                },
                "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
                "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
            },
            "KEY_PREFIX": config("CACHE_KEY_PREFIX", default="djboiler"),
            "VERSION": 1,
            "TIMEOUT": 300,  # 5 minutes default
        }
    }
    
    # Session storage in Redis for performance
    SESSION_ENGINE = "django.contrib.sessions.backends.cache"
    SESSION_CACHE_ALIAS = "default"
else:
    # Development fallback to local memory cache
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-snowflake",
            "TIMEOUT": 300,
            "OPTIONS": {
                "MAX_ENTRIES": 1000,
                "CULL_FREQUENCY": 3,
            }
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en"

LANGUAGES = [
    ("en", "English"),
    ("fr", "Fran√ßais"),
]

LOCALE_PATHS = [
    BASE_DIR / "locale",
]

TIME_ZONE = "UTC"

USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model
AUTH_USER_MODEL = "core.User"

# Prefect Configuration
PREFECT_API_URL = config("PREFECT_API_URL", default="http://prefect-server:4200/api")
PREFECT_SERVER_HOST = config("PREFECT_SERVER_HOST", default="prefect-server")
PREFECT_SERVER_PORT = config("PREFECT_SERVER_PORT", default="4200")

# Static files configuration for production
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Logging configuration
# Configure structlog for structured JSON logging
from core.logging import configure_structlog

configure_structlog()

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {
            "format": "{message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "json",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO" if DJANGO_ENV == "production" else "DEBUG",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "core": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

# Django REST Framework Configuration
REST_FRAMEWORK = {
    # Authentication
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    # Permissions
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    # Renderers - JSONRenderer only in production, add BrowsableAPI for dev
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ]
    + (["rest_framework.renderers.BrowsableAPIRenderer"] if DEBUG else []),
    # Parsers
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ],
    # Pagination
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,
    # Versioning
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "DEFAULT_VERSION": "v1",
    "ALLOWED_VERSIONS": ["v1"],
    "VERSION_PARAM": "version",
    # Throttling - enabled with reasonable defaults
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "100/hour",  # Anonymous users: 100 requests per hour
        "user": "1000/hour",  # Authenticated users: 1000 requests per hour
    },
    # Exception handling
    "EXCEPTION_HANDLER": "api.v1.exceptions.custom_exception_handler",
    # API Documentation Schema
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# API Documentation with drf-spectacular
SPECTACULAR_SETTINGS = {
    "TITLE": "Django Backend Boilerplate API",
    "DESCRIPTION": "Enterprise-ready Django backend with multi-tenant RBAC, SSO, and comprehensive API documentation",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SCHEMA_PATH_PREFIX": "/api/v1/",
    "DEFAULT_GENERATOR_CLASS": "drf_spectacular.generators.SchemaGenerator",
    "AUTHENTICATION_WHITELIST": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "SERVERS": [
        {"url": "http://localhost:8001", "description": "Development server"},
        {"url": "https://api.yourdomain.com", "description": "Production server"},
    ],
    "TAGS": [
        {"name": "Authentication", "description": "User authentication and token management"},
        {"name": "Users", "description": "User management and profile operations"},
        {"name": "Organizations", "description": "Multi-tenant organization management"},
        {"name": "Health", "description": "System health and monitoring"},
        {"name": "Storage", "description": "File upload and storage operations"},
    ],
    "EXTERNAL_DOCS": {
        "description": "Full documentation",
        "url": "https://github.com/MattGaiser/django-backend-boilerplate",
    },
    "CONTACT": {
        "name": "API Support",
        "email": "support@yourdomain.com",
    },
    "LICENSE": {
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
    # Security schemes
    "SECURITY": [
        {
            "type": "apiKey",
            "in": "header",
            "name": "Authorization",
            "description": "Token-based authentication using format: `Token <your-token>`"
        }
    ],
    "COMPONENT_SPLIT_REQUEST": True,
    "SORT_OPERATIONS": False,
    "ENUM_NAME_OVERRIDES": {
        "OrgRoleEnum": "constants.roles.OrgRole",
        "LanguageEnum": "core.constants.LanguageChoices",
        "PlanEnum": "core.constants.PlanChoices",
    },
}

# CORS Configuration for Frontend Integration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React development server
    "http://127.0.0.1:3000",  # Alternative React development server
    "http://0.0.0.0:3000",  # Docker-based React development
]

# Additional CORS settings for development
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only allow all origins in debug mode

# CSRF Configuration for Token-Based Authentication
# Since we use token authentication for API endpoints, we can exempt API URLs from CSRF
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://0.0.0.0:3000",
]

# Security Headers Configuration
SECURE_CONTENT_TYPE_NOSNIFF = True  # X-Content-Type-Options: nosniff
X_FRAME_OPTIONS = "DENY"  # X-Frame-Options: DENY
SECURE_BROWSER_XSS_FILTER = True  # X-XSS-Protection: 1; mode=block

# Content Security Policy (basic configuration)
SECURE_CSP_DEFAULT_SRC = "'self'"
SECURE_CSP_SCRIPT_SRC = "'self' 'unsafe-inline'"
SECURE_CSP_STYLE_SRC = "'self' 'unsafe-inline'"
SECURE_CSP_IMG_SRC = "'self' data: https:"
SECURE_CSP_CONNECT_SRC = "'self'"

# Additional security headers for production
if not DEBUG and DJANGO_ENV == "production":
    SECURE_HSTS_SECONDS = 31536000  # HSTS header for 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = True  # Redirect HTTP to HTTPS
# Django Sites Framework (required for allauth)
SITE_ID = 1

# Django Allauth Configuration
AUTHENTICATION_BACKENDS = [
    # Default Django authentication backend
    "django.contrib.auth.backends.ModelBackend",
    # Allauth authentication backends
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Allauth general settings
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USER_MODEL_EMAIL_FIELD = "email"
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_RATE_LIMITS = {
    "login_failed": "5/5m",  # 5 attempts per 5 minutes
}
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https" if not DEBUG else "http"

# Social account settings
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"  # Social accounts are pre-verified
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_ADAPTER = "core.adapters.CustomSocialAccountAdapter"
ACCOUNT_ADAPTER = "core.adapters.CustomAccountAdapter"

# Social provider configurations - Google OAuth2
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "OAUTH_PKCE_ENABLED": True,
        "APP": {
            "client_id": config("GOOGLE_OAUTH2_CLIENT_ID", default=""),
            "secret": config("GOOGLE_OAUTH2_CLIENT_SECRET", default=""),
            "key": "",
        },
    },
    "microsoft": {
        "SCOPE": [
            "User.Read",
            "email",
        ],
        "APP": {
            "client_id": config("AZURE_AD_CLIENT_ID", default=""),
            "secret": config("AZURE_AD_CLIENT_SECRET", default=""),
            "key": "",
        },
    },
}

# Google Cloud Storage Configuration
USE_GCS_EMULATOR = config("USE_GCS_EMULATOR", default=False, cast=bool)
GCS_BUCKET_NAME = config("GCS_BUCKET_NAME", default="dev-app-assets")
GCS_EMULATOR_HOST = config("GCS_EMULATOR_HOST", default="http://fake-gcs-server:9090")

# GCS client configuration
if USE_GCS_EMULATOR:
    # Configuration for local development with fake-gcs-server
    GCS_CLIENT_OPTIONS = {
        "api_endpoint": GCS_EMULATOR_HOST,
    }
    # Disable authentication for emulator
    import os
    os.environ["STORAGE_EMULATOR_HOST"] = GCS_EMULATOR_HOST.replace("http://", "")
else:
    # Production configuration
    GCS_CLIENT_OPTIONS = {}

# Storage settings for uploaded files
DEFAULT_FILE_STORAGE = "core.storage.GCSStorage"
GCS_DEFAULT_ACL = None  # Use bucket default ACL

# ================================
# ENTERPRISE FEATURES CONFIGURATION
# ================================

# Performance Monitoring with Django Silk (Development only)
if DEBUG:
    SILKY_PYTHON_PROFILER = True
    SILKY_PYTHON_PROFILER_BINARY = True
    SILKY_PYTHON_PROFILER_RESULT_PATH = "/tmp/silk_profiles/"
    SILKY_META = True
    SILKY_INTERCEPT_FUNC = lambda request: True  # Profile all requests in dev
    SILKY_MAX_REQUEST_BODY_SIZE = 1024 * 1024  # 1MB
    SILKY_MAX_RESPONSE_BODY_SIZE = 1024 * 1024  # 1MB
    
    # Debug toolbar configuration
    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": lambda request: DEBUG,
        "SHOW_COLLAPSED": True,
    }
    INTERNAL_IPS = ["127.0.0.1", "localhost"]

# Rate Limiting Configuration
RATELIMIT_ENABLE = config("RATELIMIT_ENABLE", default=True, cast=bool)
RATELIMIT_USE_CACHE = "default"
RATELIMIT_VIEW = "core.views.ratelimited"

# Environment Validation (using Pydantic)
ENVIRONMENT_VALIDATION = {
    "REQUIRED_VARS": [
        "SECRET_KEY",
        "DJANGO_ENV",
        "POSTGRES_DB",
        "POSTGRES_USER", 
        "POSTGRES_PASSWORD",
    ],
    "STAGING_VARS": [
        "ALLOWED_HOSTS",
        "POSTGRES_HOST",
    ],
    "PRODUCTION_VARS": [
        "ALLOWED_HOSTS",
        "POSTGRES_HOST",
        "GOOGLE_OAUTH2_CLIENT_ID",
        "GOOGLE_OAUTH2_CLIENT_SECRET",
    ],
}

# Monitoring and Metrics
PROMETHEUS_EXPORT_MIGRATIONS = False  # Don't expose migration metrics
PROMETHEUS_LATENCY_BUCKETS = (
    0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1.0, 2.5, 5.0, 7.5, 10.0, float("inf")
)

# Background Jobs Configuration (beyond Prefect)
BACKGROUND_JOBS = {
    "ENABLED": config("BACKGROUND_JOBS_ENABLED", default=True, cast=bool),
    "QUEUE_NAME": config("JOB_QUEUE_NAME", default="default"),
    "RETRY_ATTEMPTS": config("JOB_RETRY_ATTEMPTS", default=3, cast=int),
    "TIMEOUT": config("JOB_TIMEOUT", default=300, cast=int),  # 5 minutes
}

# Enhanced Security Configuration
SECURITY_HEADERS = {
    "REFERRER_POLICY": "strict-origin-when-cross-origin",
    "PERMISSIONS_POLICY": "geolocation=(), microphone=(), camera=()",
    "CROSS_ORIGIN_OPENER_POLICY": "same-origin",
    "CROSS_ORIGIN_EMBEDDER_POLICY": "require-corp",
}

# File Upload Security
FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# ALLOWED_FILE_EXTENSIONS for security
ALLOWED_FILE_EXTENSIONS = [
    # Images
    '.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg',
    # Documents
    '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx',
    '.txt', '.csv', '.rtf',
    # Archives
    '.zip', '.tar', '.gz',
    # Media
    '.mp4', '.avi', '.mov', '.wmv', '.mp3', '.wav',
]

DANGEROUS_FILE_EXTENSIONS = [
    '.exe', '.bat', '.cmd', '.com', '.pif', '.scr', '.vbs', '.js',
    '.jar', '.app', '.deb', '.pkg', '.rpm', '.dmg', '.msi',
    '.php', '.jsp', '.asp', '.aspx', '.py', '.rb', '.pl',
]

# API Response Configuration
API_RESPONSE_FORMATS = {
    "DEFAULT_ERROR_FORMAT": "detailed",  # or "simple"
    "INCLUDE_STACK_TRACE": DEBUG,
    "MAX_PAGE_SIZE": 1000,
    "DEFAULT_PAGE_SIZE": 100,
}

# Backup Configuration
BACKUP_CONFIG = {
    "ENABLED": config("BACKUP_ENABLED", default=False, cast=bool),
    "SCHEDULE": config("BACKUP_SCHEDULE", default="0 2 * * *"),  # Daily at 2 AM
    "RETENTION_DAYS": config("BACKUP_RETENTION_DAYS", default=30, cast=int),
    "STORAGE_BACKEND": config("BACKUP_STORAGE", default="local"),
}

# Email Configuration
EMAIL_BACKEND = config(
    "EMAIL_BACKEND", 
    default="django.core.mail.backends.console.EmailBackend" if DEBUG else "django.core.mail.backends.smtp.EmailBackend"
)
EMAIL_HOST = config("EMAIL_HOST", default="localhost")
EMAIL_PORT = config("EMAIL_PORT", default=587, cast=int)
EMAIL_USE_TLS = config("EMAIL_USE_TLS", default=True, cast=bool)
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", default="")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", default="noreply@yourdomain.com")

# Notification System Configuration
NOTIFICATIONS = {
    "ENABLED": config("NOTIFICATIONS_ENABLED", default=True, cast=bool),
    "CHANNELS": {
        "email": config("NOTIFICATIONS_EMAIL", default=True, cast=bool),
        "slack": config("NOTIFICATIONS_SLACK", default=False, cast=bool),
        "webhook": config("NOTIFICATIONS_WEBHOOK", default=False, cast=bool),
    },
    "SLACK_WEBHOOK_URL": config("SLACK_WEBHOOK_URL", default=""),
    "WEBHOOK_ENDPOINTS": config("WEBHOOK_ENDPOINTS", default="", cast=lambda v: v.split(",") if v else []),
}

# Search Configuration (placeholder for future implementation)
SEARCH_CONFIG = {
    "BACKEND": config("SEARCH_BACKEND", default="database"),  # "database", "elasticsearch", "solr"
    "ELASTICSEARCH_URL": config("ELASTICSEARCH_URL", default=""),
    "INDEX_PREFIX": config("SEARCH_INDEX_PREFIX", default="djboiler"),
}

# Data Export/Import Configuration
DATA_EXPORT = {
    "ENABLED": config("DATA_EXPORT_ENABLED", default=True, cast=bool),
    "MAX_RECORDS_PER_EXPORT": config("MAX_EXPORT_RECORDS", default=10000, cast=int),
    "FORMATS": ["csv", "json", "xlsx"],
    "STORAGE_BACKEND": "default",  # Use default file storage
}

# Webhook System Configuration
WEBHOOKS = {
    "ENABLED": config("WEBHOOKS_ENABLED", default=False, cast=bool),
    "TIMEOUT": config("WEBHOOK_TIMEOUT", default=30, cast=int),
    "RETRY_ATTEMPTS": config("WEBHOOK_RETRY_ATTEMPTS", default=3, cast=int),
    "SIGNATURE_HEADER": "X-Webhook-Signature",
    "EVENTS": [
        "user.created",
        "user.updated", 
        "organization.created",
        "organization.updated",
    ],
}

# Feature Flags Configuration (enhanced)
FEATURE_FLAGS = {
    "USE_CACHE": config("FEATURE_FLAGS_CACHE", default=True, cast=bool),
    "CACHE_TIMEOUT": config("FEATURE_FLAGS_CACHE_TIMEOUT", default=300, cast=int),
    "DEFAULT_VALUE": False,
    "AVAILABLE_FLAGS": [
        "EXPERIMENTAL_UI",
        "ADVANCED_ANALYTICS", 
        "BETA_FEATURES",
        "AI_INTEGRATION",
    ],
}

# Version Information
VERSION_INFO = {
    "API_VERSION": "1.0.0",
    "BUILD_DATE": config("BUILD_DATE", default=""),
    "GIT_COMMIT": config("GIT_COMMIT", default=""),
    "GIT_BRANCH": config("GIT_BRANCH", default=""),
    "ENVIRONMENT": DJANGO_ENV,
}
