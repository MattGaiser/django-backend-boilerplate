name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: django-backend
  ECS_SERVICE: django-backend-service
  ECS_CLUSTER: django-backend-cluster

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      aws_account_id: ${{ steps.set-env.outputs.aws_account_id }}
      ecr_registry: ${{ steps.set-env.outputs.ecr_registry }}
    steps:
      - name: Set environment variables
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV="production"
          else
            ENV="staging"
          fi
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          
          if [[ "$ENV" == "production" ]]; then
            echo "aws_account_id=${{ secrets.AWS_ACCOUNT_ID_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "aws_account_id=${{ secrets.AWS_ACCOUNT_ID_STAGING }}" >> $GITHUB_OUTPUT
          fi
          
          echo "ecr_registry=${{ steps.set-env.outputs.aws_account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run tests
        run: |
          python -m pytest
        env:
          CLOUD_PROVIDER: aws
          USE_POSTGRES: false
          SECRET_KEY: test-secret-key

  build-and-push:
    needs: [determine-environment, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ needs.determine-environment.outputs.ecr_registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy-infrastructure:
    needs: [determine-environment, build-and-push]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform/aws/${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.5

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="environment=${{ needs.determine-environment.outputs.environment }}" \
            -var="image_tag=${{ github.sha }}" \
            -var="django_secret_key=${{ secrets.DJANGO_SECRET_KEY }}" \
            -var="database_password=${{ secrets.DATABASE_PASSWORD }}" \
            -var="google_oauth2_client_id=${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}" \
            -var="google_oauth2_client_secret=${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}" \
            -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

  deploy-application:
    needs: [determine-environment, deploy-infrastructure]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }}-${{ needs.determine-environment.outputs.environment }} \
            --service ${{ env.ECS_SERVICE }}-${{ needs.determine-environment.outputs.environment }} \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }}-${{ needs.determine-environment.outputs.environment }} \
            --services ${{ env.ECS_SERVICE }}-${{ needs.determine-environment.outputs.environment }}

  health-check:
    needs: [determine-environment, deploy-application]
    runs-on: ubuntu-latest
    steps:
      - name: Health check
        run: |
          # Add health check logic here
          echo "Performing health check for ${{ needs.determine-environment.outputs.environment }} environment"
          # curl -f https://your-app-endpoint/api/v1/health/ || exit 1