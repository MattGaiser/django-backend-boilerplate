# docker-compose.minimal-test.yml
# Minimal test configuration with only essential services (Django + PostgreSQL + GCS emulator)
# This extends the base docker-compose.yml with test-specific overrides for faster testing

services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-django_test_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-django_test_password}
      POSTGRES_DB: ${POSTGRES_DB:-django_test_db}
    env_file:
      - .env.test
    volumes: 
      # Use tmpfs for faster test database (in-memory storage)
      - type: tmpfs
        target: /var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports: []  # No external ports needed for testing

  django:
    build: .
    env_file:
      - .env.test
    environment:
      - DEBUG=false
      - DJANGO_ENV=test
      - DJANGO_SETTINGS_MODULE=DjangoBoilerplate.settings
      - USE_POSTGRES=true
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      # GCS emulator configuration
      - USE_GCS_EMULATOR=true
      - GCS_EMULATOR_HOST=http://fake-gcs-server:9090
      - GCS_BUCKET_NAME=test-bucket
    depends_on:
      db:
        condition: service_healthy
      fake-gcs-server:
        condition: service_started
    volumes:
      - .:/app
    command: >
      sh -c "pip install --no-cache-dir -r requirements-dev.txt &&
             python manage.py migrate &&
             pytest -v --tb=short --reuse-db"
    ports: []  # No external ports needed for testing

  fake-gcs-server:
    image: fsouza/fake-gcs-server:1.49.0
    command: -scheme http -host 0.0.0.0 -port 9090
    ports: []  # No external ports needed for testing
    volumes:
      # Use tmpfs for faster temporary storage
      - type: tmpfs
        target: /data

# No volumes needed for testing (using tmpfs)