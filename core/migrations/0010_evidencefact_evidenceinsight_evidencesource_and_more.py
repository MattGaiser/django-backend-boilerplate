# Generated by Django 5.2.4 on 2025-08-03 11:00

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0009_add_experimental_feature_flags'),
    ]

    operations = [
        migrations.CreateModel(
            name='EvidenceFact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('content', models.TextField(help_text='The main content of the evidence fact', verbose_name='Content')),
                ('title', models.CharField(blank=True, help_text='Title or heading for the evidence fact', max_length=255, verbose_name='Title')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the evidence fact', verbose_name='Notes')),
                ('confidence_score', models.FloatField(blank=True, help_text='AI confidence score for this fact (0.0 to 1.0)', null=True, verbose_name='Confidence Score')),
                ('participant', models.CharField(blank=True, help_text='Participant or speaker associated with this fact', max_length=255, verbose_name='Participant')),
                ('sentiment', models.CharField(blank=True, choices=[('positive', 'Positive'), ('neutral', 'Neutral'), ('negative', 'Negative')], help_text='Sentiment analysis of the fact', max_length=20, null=True, verbose_name='Sentiment')),
                ('extracted_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this fact was extracted', verbose_name='Extracted At')),
                ('embedding', models.TextField(blank=True, help_text='Vector embedding for similarity search', verbose_name='Embedding')),
                ('tags_list', models.JSONField(blank=True, default=list, help_text='List of tag names for this fact', verbose_name='Tags')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(help_text='Organization this evidence fact belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='evidence_facts', to='core.organization')),
                ('project', models.ForeignKey(help_text='Project this evidence fact belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='evidence_facts', to='core.project')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Evidence Fact',
                'verbose_name_plural': 'Evidence Facts',
            },
        ),
        migrations.CreateModel(
            name='EvidenceInsight',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('title', models.CharField(help_text='Title of the evidence insight', max_length=255, verbose_name='Title')),
                ('description', models.TextField(help_text='Detailed description of the insight', verbose_name='Description')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', help_text='Priority level of this insight', max_length=20, verbose_name='Priority')),
                ('tags_list', models.JSONField(blank=True, default=list, help_text='List of tag names for this insight', verbose_name='Tags')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(help_text='Organization this evidence insight belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='evidence_insights', to='core.organization')),
                ('project', models.ForeignKey(help_text='Project this evidence insight belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='evidence_insights', to='core.project')),
                ('related_facts', models.ManyToManyField(blank=True, help_text='Evidence facts that support this insight', related_name='insights', to='core.evidencefact', verbose_name='Related Facts')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Evidence Insight',
                'verbose_name_plural': 'Evidence Insights',
            },
        ),
        migrations.CreateModel(
            name='EvidenceSource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('name', models.CharField(help_text='Name of the evidence source', max_length=255, verbose_name='Name')),
                ('type', models.CharField(choices=[('document', 'Document'), ('video', 'Video'), ('audio', 'Audio'), ('text', 'Text'), ('image', 'Image')], help_text='Type of evidence source', max_length=20, verbose_name='Type')),
                ('file_path', models.CharField(blank=True, help_text='Path to the uploaded file in storage', max_length=500, null=True, verbose_name='File Path')),
                ('content', models.TextField(blank=True, help_text='Text content of the evidence source', verbose_name='Content')),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='Size of the uploaded file in bytes', null=True, verbose_name='File Size')),
                ('mime_type', models.CharField(blank=True, help_text='MIME type of the uploaded file', max_length=100, verbose_name='MIME Type')),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Current processing status', max_length=20, verbose_name='Processing Status')),
                ('upload_date', models.DateTimeField(auto_now_add=True, help_text='Date and time when the file was uploaded', verbose_name='Upload Date')),
                ('summary', models.TextField(blank=True, help_text='AI-generated summary of the content', verbose_name='Summary')),
                ('notes', models.TextField(blank=True, help_text='User notes about the evidence source', verbose_name='Notes')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata including tags', verbose_name='Metadata')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(help_text='Organization this evidence source belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='evidence_sources', to='core.organization')),
                ('project', models.ForeignKey(help_text='Project this evidence source belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='evidence_sources', to='core.project')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Evidence Source',
                'verbose_name_plural': 'Evidence Sources',
            },
        ),
        migrations.AddField(
            model_name='evidencefact',
            name='source',
            field=models.ForeignKey(help_text='Evidence source this fact was extracted from', on_delete=django.db.models.deletion.CASCADE, related_name='evidence_facts', to='core.evidencesource'),
        ),
        migrations.CreateModel(
            name='EvidenceChunk',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('chunk_index', models.PositiveIntegerField(help_text='Order index of this chunk within the source', verbose_name='Chunk Index')),
                ('chunk_text', models.TextField(help_text='Text content of this chunk', verbose_name='Chunk Text')),
                ('embedding', models.TextField(blank=True, help_text='Vector embedding for similarity search', verbose_name='Embedding')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata for the chunk', verbose_name='Metadata')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(help_text='Organization this evidence chunk belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='evidence_chunks', to='core.organization')),
                ('project', models.ForeignKey(help_text='Project this evidence chunk belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='evidence_chunks', to='core.project')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('source', models.ForeignKey(help_text='Evidence source this chunk was created from', on_delete=django.db.models.deletion.CASCADE, related_name='evidence_chunks', to='core.evidencesource')),
            ],
            options={
                'verbose_name': 'Evidence Chunk',
                'verbose_name_plural': 'Evidence Chunks',
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('title', models.CharField(help_text='Title of the recommendation', max_length=255, verbose_name='Title')),
                ('description', models.TextField(help_text='Detailed description of the recommendation', verbose_name='Description')),
                ('effort', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', help_text='Estimated effort required to implement', max_length=20, verbose_name='Effort')),
                ('impact', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', help_text='Expected impact of this recommendation', max_length=20, verbose_name='Impact')),
                ('tags_list', models.JSONField(blank=True, default=list, help_text='List of tag names for this recommendation', verbose_name='Tags')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(help_text='Organization this recommendation belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='core.organization')),
                ('project', models.ForeignKey(help_text='Project this recommendation belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='core.project')),
                ('related_insights', models.ManyToManyField(blank=True, help_text='Evidence insights that support this recommendation', related_name='recommendations', to='core.evidenceinsight', verbose_name='Related Insights')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recommendation',
                'verbose_name_plural': 'Recommendations',
            },
        ),
        migrations.AddIndex(
            model_name='evidenceinsight',
            index=models.Index(fields=['organization', 'project'], name='core_eviden_organiz_6361d6_idx'),
        ),
        migrations.AddIndex(
            model_name='evidenceinsight',
            index=models.Index(fields=['priority'], name='core_eviden_priorit_631dd1_idx'),
        ),
        migrations.AddIndex(
            model_name='evidencesource',
            index=models.Index(fields=['organization', 'project', 'type'], name='core_eviden_organiz_24bb05_idx'),
        ),
        migrations.AddIndex(
            model_name='evidencesource',
            index=models.Index(fields=['processing_status'], name='core_eviden_process_d3ef42_idx'),
        ),
        migrations.AddIndex(
            model_name='evidencesource',
            index=models.Index(fields=['upload_date'], name='core_eviden_upload__d03380_idx'),
        ),
        migrations.AddIndex(
            model_name='evidencefact',
            index=models.Index(fields=['organization', 'project', 'source'], name='core_eviden_organiz_1696a0_idx'),
        ),
        migrations.AddIndex(
            model_name='evidencefact',
            index=models.Index(fields=['extracted_at'], name='core_eviden_extract_885705_idx'),
        ),
        migrations.AddIndex(
            model_name='evidencefact',
            index=models.Index(fields=['confidence_score'], name='core_eviden_confide_e340dc_idx'),
        ),
        migrations.AddIndex(
            model_name='evidencefact',
            index=models.Index(fields=['sentiment'], name='core_eviden_sentime_d5e53e_idx'),
        ),
        migrations.AddIndex(
            model_name='evidencechunk',
            index=models.Index(fields=['organization', 'project', 'source'], name='core_eviden_organiz_b8553e_idx'),
        ),
        migrations.AddIndex(
            model_name='evidencechunk',
            index=models.Index(fields=['chunk_index'], name='core_eviden_chunk_i_51b6b9_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['organization', 'project'], name='core_recomm_organiz_b85ced_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['effort', 'impact'], name='core_recomm_effort_1bc5fa_idx'),
        ),
    ]
